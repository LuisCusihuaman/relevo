# Vite + React Project Rules

> **Meta-rule — “Traceable”**
> When you apply a rule in an answer, **name the rule** (one or two words) so reviewers can see *why* you made each change.

---

## 1. Code Style & Structure — “Concise-FP”

* **Functional & declarative**; no classes.
* **≤ 80 LOC per component**; one responsibility.
* **Iterate & modularise**; never duplicate code.
* **Verb-first names** (`isLoading`, `hasError`, `handleSubmit`).
* **Named exports** everywhere.
* **Absolute imports** (`@/...`).

### Repository layout *(all kebab-case)*

```
src
├── api            # axios / tanstack-query calls
├── components
│   ├── card.tsx
│   ├── ui         # ⚠️ shadcn/ui – do NOT edit files here
│   └── …          # app-specific atoms/molecules
├── features       # feature “slices”
├── hooks          # shared hooks
├── lib            # auth, env, utils, storage
├── routes         # TanStack Router files
├── translations   # i18n resources
├── types          # global TS types
└── styles
    └── global.css # (only if unavoidable)
```

---

## 2. Tech Stack — “Stack-Web”

| Area          | Libs / Tools                                              |
| ------------- | --------------------------------------------------------- |
| Build         | **Vite**, **pnpm**                                        |
| UI            | **React 19**, **Tailwind CSS v4**, Headless UI, Heroicons |
| Routing       | TanStack Router                                           |
| Data-Fetch    | TanStack Query                                            |
| State         | Zustand                                                   |
| Forms         | React Hook Form + Zod                                     |
| Charts        | Nivo                                                      |
| Tests         | Vitest, React Testing Library, Playwright                 |
| Lint / Format | ESLint (+ `@typescript-eslint`, `unicorn`, …), Prettier   |
| DevTools      | TanStack *-devtools*, React Hook Form DevTools            |
| Misc          | Dayjs, Faker (dev only), ts-reset                         |

---

## 3. TypeScript — “Strict-TS”

* All files **.ts / .tsx**.
* Prefer **`type`**; use `interface` only to extend external types.
* **No `enum`** – use `const obj as const`.
* **Explicit return types** for every exported function.
* **No `try/catch`** unless you transform or surface the error immediately.
* Use **discriminated unions** for messages / events.

---

## 4. State Management — “Zustand-CleanUp”

* Global state in **Zustand** slices.
* Always **unsubscribe / cleanup** in `useEffect`.

---

## 5. Syntax & Formatting — “Readable-JSX”

* Declare utilities with `function`, arrow lambdas only for inline callbacks.
* Omit braces on single-line returns / ternaries where safe.
* Memoise heavy selectors (`React.memo`, `useMemo`, `useCallback`).

---

## 6. UI & Styling — “Shadcn-Immutable · Tailwind-v4 · Avoid-Global-CSS”

* Style exclusively with **Tailwind CSS v4** utilities.
* **`src/components/ui` is generated by shadcn/ui – *never modify these files*.**
* App-specific UI primitives go in `src/components`.
* Add custom CSS **only if unavoidable**; place it in `src/styles/tailwind.css`.
* Follow WCAG: `role`, `aria-*`, logical tab order.
* Prevent needless re-renders via React memoisation patterns.

---

## 7. Error Handling — “Surface-Friendly”

* Bubble technical errors to **TanStack Query** helpers.
* Show end-users friendly messages with a reusable `<ErrorBanner />`.

---

## 8. Testing — “Test-Pyramid”

* **Vitest + RTL** for units; files `*.test.tsx` colocated.
* **Playwright** for E2E in `tests/e2e`.
* Skip unit tests for simple presentational components.

---

## 9. Git — “Conventional-Commits”

| Prefix      | Purpose                        |
| ----------- | ------------------------------ |
| `feat:`     | new feature                    |
| `fix:`      | bug fix                        |
| `perf:`     | performance                    |
| `docs:`     | documentation                  |
| `style:`    | formatting / lint-only         |
| `refactor:` | code refactor (no feature/fix) |
| `test:`     | add/update tests               |
| `chore:`    | tooling, CI, deps              |

* Subject line ≤ 100 chars, lower-case, imperative.
* Reference issues (`#123`) when applicable.

---

## 10. Documentation — “Living-Docs”

* **README.md** covers: *Setup · Usage · Stack · Folder Structure*.
* ADRs / RFCs live in `/docs`.